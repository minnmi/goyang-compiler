; Generated by goyangi Compiler.

; compile the program using commands like:
;	fasm [output code].asm [output object].o

format ELF



section '.text' executable

	public main
	main:

	extrn printf
	extrn scanf
begin_0:
	PUSH	str_2
	PUSH	string_mask
	CALL	printf
	PUSH	num1
	PUSH	int_mask
	CALL	scanf
	PUSH	str_3
	PUSH	string_mask
	CALL	printf
	PUSH	num2
	PUSH	int_mask
	CALL	scanf
	PUSH	str_4
	PUSH	string_mask
	CALL	printf
	PUSH	num3
	PUSH	int_mask
	CALL	scanf
	MOV	EAX, [num1]
	MOV	EBX, [num2]
	CMP	EAX, EBX
	JL	else_1
	PUSH	str_5
	PUSH	string_mask
	CALL	printf
	JMP	end_1
else_1:
	PUSH	str_6
	PUSH	string_mask
	CALL	printf
end_1:
	MOV	EAX, [num1]
	MOV	EBX, [num3]
	CMP	EAX, EBX
	JL	else_2
	PUSH	str_7
	PUSH	string_mask
	CALL	printf
	JMP	end_2
else_2:
	PUSH	str_8
	PUSH	string_mask
	CALL	printf
end_2:
	MOV	EAX, [num2]
	MOV	EBX, [num3]
	CMP	EAX, EBX
	JL	else_3
	PUSH	str_9
	PUSH	string_mask
	CALL	printf
	JMP	end_3
else_3:
	PUSH	str_10
	PUSH	string_mask
	CALL	printf
end_3:
	PUSH	str_11
	PUSH	string_mask
	CALL	printf
	PUSH	str_12
	PUSH	string_mask
	CALL	printf
	PUSH	num1
	PUSH	int_mask
	CALL	scanf
	PUSH	num2
	PUSH	int_mask
	CALL	scanf
	MOV	EAX, [num1]
	MOV	EBX, [num2]
	CMP	EAX, EBX
	JL	else_4
begin_5:
	MOV	EAX, [num1]
	MOV	EBX, [num2]
	CMP	EAX, EBX
	JL	end_5
	PUSH	str_13
	PUSH	string_mask
	CALL	printf
	PUSH	[num1]
	PUSH	int_mask
	CALL	printf
	PUSH	str_14
	PUSH	string_mask
	CALL	printf
	MOV	EBX, 1
	MOV	EAX, [num1]
	SUB	EAX, EBX
	PUSH	EAX
	POP	EBX
	MOV	EAX, num1
	MOV	[EAX], EBX
	JMP	begin_5
end_5:
	JMP	end_4
else_4:
begin_6:
	MOV	EAX, [num1]
	MOV	EBX, [num2]
	CMP	EAX, EBX
	JNL	end_6
	PUSH	str_15
	PUSH	string_mask
	CALL	printf
	PUSH	[num2]
	PUSH	int_mask
	CALL	printf
	PUSH	str_16
	PUSH	string_mask
	CALL	printf
	MOV	EBX, 1
	MOV	EAX, [num2]
	SUB	EAX, EBX
	PUSH	EAX
	POP	EBX
	MOV	EAX, num2
	MOV	[EAX], EBX
	JMP	begin_6
end_6:
end_4:
	PUSH	str_17
	PUSH	string_mask
	CALL	printf
end_0:
	mov	EAX, 1
	XOR	EBX, EBX
	INT	0x80

section '.data' writeable

string_mask	db	"%s", 0
int_mask  	db	"%d", 0
str_2     	db	"Digite o primeiro numero", 0xA, 0
str_3     	db	"Digite o segundo numero", 0xA, 0
str_4     	db	"Digite o terceiro numero", 0xA, 0
str_5     	db	"num1 é maior que num2.", 0xA, 0
str_6     	db	"num1 é menor que num2.", 0xA, 0
str_7     	db	"num1 é maior que num3.", 0xA, 0
str_8     	db	"num1 é menor que num3.", 0xA, 0
str_9     	db	"num2 é maior que num3.", 0xA, 0
str_10    	db	"num2 é menor que num3.", 0xA, 0
str_11    	db	"||---------------------------||", 0xA, 0
str_12    	db	"Digite 2 números:", 0xA, 0
str_13    	db	"Maior: ", 0xA, 0
str_14    	db	"", 0xA, 0
str_15    	db	"Maior:", 0xA, 0
str_16    	db	"", 0xA, 0
str_17    	db	"---------------------------", 0xA, 0
num1      	dd	0
num2      	dd	0
num3      	dd	0
aux       	dd	0
